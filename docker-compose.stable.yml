version: '3.8'

# Stable Production Configuration
# Veri kaybı olmadan güncelleme

services:
  # PostgreSQL Database - Veriler korunur
  mes-database:
    image: postgres:15-alpine
    container_name: mes-database
    environment:
      POSTGRES_DB: mes_production
      POSTGRES_USER: mes_user
      POSTGRES_PASSWORD: mes_secure_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mes_user -d mes_production"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend API Service
  mes-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: mes-backend
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=mes-database
      - DB_PORT=5432
      - DB_NAME=mes_production
      - DB_USER=mes_user
      - DB_PASSWORD=mes_secure_password_2024
    ports:
      - "3001:3001"
    depends_on:
      mes-database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 3001, path: '/api/working-hours', timeout: 2000 }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  mes-frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mes-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-ssl.conf:/etc/nginx/nginx.conf:ro
      - /etc/ssl/certs/mes-selfsigned.crt:/etc/ssl/certs/mes-selfsigned.crt:ro
      - /etc/ssl/private/mes-selfsigned.key:/etc/ssl/private/mes-selfsigned.key:ro
    depends_on:
      - mes-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for Session Storage
  mes-redis:
    image: redis:7-alpine
    container_name: mes-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Webhook Server
  mes-webhook:
    image: node:18-alpine
    container_name: mes-webhook
    ports:
      - "9000:9000"
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    working_dir: /app
    command: node scripts/webhook-server.cjs
    restart: unless-stopped
    environment:
      - WEBHOOK_SECRET=mes_webhook_secret_2024

# Persistent Volumes - VERİLER KAYBOLMAZ
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
